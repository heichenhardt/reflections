1) When would you want to use a remote repository rather than keeping all your work local?

I would use remote repository if I want to make sure that I can share my work with myself on another computer or with other people.

2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because with Git I am able to work offline without being connected to the remote at all, so Git actually can't always pull from the remote. Also while working there might be merge conflicts occuring during a pull which we have to solve manually anyhow.

3) Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is a clone of a repository within github. A clone is creating a copy of an existing repository. A branch is a commit or a series of commits.
We use a fork if we want to make changes to a repository where we don't have write permissions. We use a clone if we want to work with a repository locally (offline). We use a branch if we want to add track our changes and don't want our changes be part of the main branch called master.

4) What is the benefit of having a copy of the last known state of the remote stored locally?

I think this is done so we can work offline. Also I think this makes the merging faster / more efficiant if you don't need a connection to the server (remote) to do a merge.

5) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I think we would end up sending around lots and lots of emails. Also it would be really difficult to make sure everyone is working on the same code.
One could use a shared drive maybe but it would be really difficult...

6) When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

I think if we work in a bigger team it might be benefitial to work on individual branches rather than on master. In that case we can decide much later what goes into what release and what we keep out of it. I think in general though it is better to stay on the main branch and integrate main often.