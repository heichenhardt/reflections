*** How did viewing a diff between two versions of a file help you see the bug that was introduced?

I could see the difference in a nice line by line comparison.
It made me understand the idea behind git / linux patches as well actually.

*** How could having easy access to the entire history of a file 
make you a more efficient programmer in the long term?

Because we can easily try out new things and then just revert the file if things don't work out.
Also we can compare the file with older versions to analyse when / with what commit a bug might 
have been introduced.
Another thing is that it is really easy to delete not needed code rather than just comment it out. 
This keeps the code base clean.

*** What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, 
vs having versions automatically saved, like Google docs does?

The big pro is that we have a logical save point for our work where we can be reasonable sure that our code is 
in a consistent state. That means a state where we can easily go back to after checkoing out the code from 
version control. In other cases we would need to validate first that we are in a consistent state and that 
version control hasn't introduced any bugs.
The big con is that you have to be disziplinned enough to commit on a regular basis 
and don't forget to save your work

*** Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others,
like Google Docs, treat each file separately?

I think the difference is the purpose of the version control system. Google doc assumes that one logical unit 
of work is contained by one document while git assumes it makes perfect sense to have one unit of work distributed 
over many files. Also commiting a lot of files at once in an initial commit would become really tedious if you 
had to do it one file at a time.

*** How can you use the commands git log and git diff to view the history of files?

You can enter git log and get a list of all commits in descending order. 
You can use the command git diff commit_id_1 commit_id_2 to compare two commits. 
This will bring up a sort of patch view which shows you lines added and removed for each file 
updated in this commit.

*** Checking out prior commits

git checkout != svn checkout
Git checkout lets you bring up the version of the repository at the time of a previous commit

*** How might using version control make you more confident to make changes that could break something?

I know that I'll always have a save backup. If I introduce a bug and can't figure out how it happend 
I can always revert back to a version where I am sure that the bug is not there yet. So it is easy to undo 
harmful changes.


*** Now that you have your workspace set up, what do you want to try using Git for?

I would like to use it for our new project called vcs-project-database which we are starting to work on this week.